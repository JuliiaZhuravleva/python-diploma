import json
import requests
from pprint import pprint
from django.core.management.base import BaseCommand
from django.conf import settings


class OrderServiceClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫"""

    def __init__(self, host='localhost', port=8000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç API

        Args:
            host (str): –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ API
            port (int): –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ API
        """
        self.base_url = f'http://{host}:{port}/api/v1'
        self.token = None
        self.headers = {'Content-Type': 'application/json'}
        self.stdout = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º stdout –∫–∞–∫ None
        self.command = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥—ã Django

    def set_command(self, command):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É Django –∏ stdout"""
        self.command = command
        self.stdout = command.stdout
        self.write_success(f'üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: {self.base_url}')

    def write_message(self, message):
        """–í—ã–≤–æ–¥–∏—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self.stdout:
            self.stdout.write(message)

    def write_success(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self.stdout and self.command:
            self.stdout.write(self.command.style.SUCCESS(message))
        else:
            self.write_message(f"SUCCESS: {message}")

    def write_error(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if self.stdout and self.command:
            self.stdout.write(self.command.style.ERROR(message))
        else:
            self.write_message(f"ERROR: {message}")

    def write_warning(self, message):
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        if self.stdout and self.command:
            self.stdout.write(self.command.style.WARNING(message))
        else:
            self.write_message(f"WARNING: {message}")

    def _update_headers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if self.token:
            self.headers['Authorization'] = f'Token {self.token}'

    def register_user(self, email, password, first_name='Test', last_name='User',
                      company='Test Company', position='Tester'):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            email (str): Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password (str): –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_name (str): –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            company (str): –ö–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            position (str): –î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message(f'üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}')

        data = {
            'email': email,
            'password': password,
            'first_name': first_name,
            'last_name': last_name,
            'company': company,
            'position': position
        }

        response = requests.post(f'{self.base_url}/user/register', json=data)
        return self._process_response(response)

    def confirm_email(self, email, token):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            email (str): Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            token (str): –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message(f'‚úâÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email: {email}')

        data = {
            'email': email,
            'token': token
        }

        response = requests.post(f'{self.base_url}/user/register/confirm', json=data)
        return self._process_response(response)

    def login(self, email, password):
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            email (str): Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password (str): –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message(f'üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}')

        data = {
            'email': email,
            'password': password
        }

        response = requests.post(f'{self.base_url}/user/login', json=data)
        result = self._process_response(response)

        if response.status_code == 200 and 'token' in result:
            self.token = result['token']
            self._update_headers()
            self.write_success('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.')

        return result

    def get_user_details(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')

        response = requests.get(f'{self.base_url}/user/details', headers=self.headers)
        return self._process_response(response)

    def get_shops(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üè™ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤')

        response = requests.get(f'{self.base_url}/shops')
        return self._process_response(response)

    def get_categories(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')

        response = requests.get(f'{self.base_url}/categories')
        return self._process_response(response)

    def get_products(self, shop_id=None, category_id=None, search=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        Args:
            shop_id (int, optional): ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            category_id (int, optional): ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            search (str, optional): –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤')

        params = {}
        if shop_id:
            params['shop_id'] = shop_id
        if category_id:
            params['category_id'] = category_id
        if search:
            params['search'] = search

        response = requests.get(f'{self.base_url}/products', params=params)
        return self._process_response(response)

    def get_product_details(self, product_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ

        Args:
            product_id (int): ID —Ç–æ–≤–∞—Ä–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message(f'üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {product_id}')

        response = requests.get(f'{self.base_url}/products/{product_id}')
        return self._process_response(response)

    def add_to_basket(self, items):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É

        Args:
            items (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö
                –ü—Ä–∏–º–µ—Ä: [{"product_info": 1, "quantity": 2}]

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É')

        data = {'items': items}
        response = requests.post(f'{self.base_url}/basket',
                                 headers=self.headers, json=data)
        return self._process_response(response)

    def get_basket(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üõí –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã')

        response = requests.get(f'{self.base_url}/basket', headers=self.headers)
        return self._process_response(response)

    def add_contact(self, city, street, house, phone, structure='', building='', apartment=''):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞

        Args:
            city (str): –ì–æ—Ä–æ–¥
            street (str): –£–ª–∏—Ü–∞
            house (str): –î–æ–º
            phone (str): –¢–µ–ª–µ—Ñ–æ–Ω
            structure (str, optional): –ö–æ—Ä–ø—É—Å
            building (str, optional): –°—Ç—Ä–æ–µ–Ω–∏–µ
            apartment (str, optional): –ö–≤–∞—Ä—Ç–∏—Ä–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üìû –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞')

        data = {
            'city': city,
            'street': street,
            'house': house,
            'phone': phone,
            'structure': structure,
            'building': building,
            'apartment': apartment
        }

        response = requests.post(f'{self.base_url}/user/contact',
                                 headers=self.headers, json=data)
        return self._process_response(response)

    def get_contacts(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üìû –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')

        response = requests.get(f'{self.base_url}/user/contact', headers=self.headers)
        return self._process_response(response)

    def create_order(self, basket_id, contact_id):
        """
        –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

        Args:
            basket_id (int): ID –∫–æ—Ä–∑–∏–Ω—ã
            contact_id (int): ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞')

        data = {
            'id': basket_id,
            'contact': contact_id
        }

        response = requests.post(f'{self.base_url}/order',
                                 headers=self.headers, json=data)
        return self._process_response(response)

    def get_orders(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤')

        response = requests.get(f'{self.base_url}/order', headers=self.headers)
        return self._process_response(response)

    def get_order_details(self, order_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–∫–∞–∑–µ

        Args:
            order_id (int): ID –∑–∞–∫–∞–∑–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        self.write_message(f'üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {order_id}')

        response = requests.get(f'{self.base_url}/order/{order_id}', headers=self.headers)
        return self._process_response(response)

    def _process_response(self, response):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç API

        Args:
            response: –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ requests

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            result = response.json()
        except json.JSONDecodeError:
            result = {'error': 'Invalid JSON response', 'text': response.text}

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code >= 400:
            self.write_error(
                f'‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {result.get("error", "Unknown error")}')
        else:
            self.write_success(
                f'‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –°—Ç–∞—Ç—É—Å: {response.status_code}')

        return result


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—É–ø–æ–∫'

    def add_arguments(self, parser):
        parser.add_argument(
            '--host',
            default='localhost',
            help='–•–æ—Å—Ç API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost)'
        )
        parser.add_argument(
            '--port',
            type=int,
            default=8000,
            help='–ü–æ—Ä—Ç API —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)'
        )
        parser.add_argument(
            '--scenario',
            choices=['full', 'auth', 'products', 'order'],
            default='full',
            help='–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: full)'
        )
        parser.add_argument(
            '--user',
            default='buyer1@example.com',
            help='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: buyer1@example.com)'
        )
        parser.add_argument(
            '--password',
            default='Strong123!',
            help='–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Strong123!)'
        )

    def handle(self, *args, **options):
        host = options['host']
        port = options['port']
        scenario = options['scenario']
        user_email = options['user']
        user_password = options['password']

        try:
            self.stdout.write(self.style.SUCCESS(f'–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API ({scenario})'))
            self.stdout.write(f'–•–æ—Å—Ç: {host}, –ü–æ—Ä—Ç: {port}')

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ API
            client = OrderServiceClient(host, port)
            client.set_command(self)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ stdout

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            if scenario == 'full':
                self._run_full_scenario(client, user_email, user_password)
            elif scenario == 'auth':
                self._run_auth_scenario(client, user_email, user_password)
            elif scenario == 'products':
                self._run_products_scenario(client, user_email, user_password)
            elif scenario == 'order':
                self._run_order_scenario(client, user_email, user_password)

            self.stdout.write(self.style.SUCCESS('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'))

        except requests.RequestException as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'))

    def _run_full_scenario(self, client, user_email, user_password):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏
        """
        self.stdout.write(self.style.SUCCESS('\n==== –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ====\n'))

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self._run_auth_scenario(client, user_email, user_password)

        # –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        self._run_products_scenario(client, user_email, user_password)

        # –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏
        self._run_order_scenario(client, user_email, user_password)

    def _run_auth_scenario(self, client, user_email, user_password):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        self.stdout.write(self.style.SUCCESS('\n---- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ----\n'))

        # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        login_result = client.login(user_email, user_password)

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'token' not in login_result:
            client.write_warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ {user_email}, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–∏–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏')

            login_users = [
                ('buyer1@example.com', 'Strong123!'),
                ('buyer2@example.com', 'Strong123!'),
                ('buyer3@example.com', 'Strong123!'),
                ('buyer4@example.com', 'Strong123!'),
                ('buyer5@example.com', 'Strong123!')
            ]

            for email, password in login_users:
                if email != user_email:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏
                    login_result = client.login(email, password)
                    if 'token' in login_result:
                        client.write_success(f'–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {email}')
                        break

        # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if 'token' not in login_result:
            client.write_warning('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∏–º–µ—é—â–∏–º–∏—Å—è —É—á–µ—Ç–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            import time
            test_email = f'test_{int(time.time())}@example.com'
            test_password = 'Strong123!'

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            register = input('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (y/n): ').strip().lower()
            if register == 'y':
                register_result = client.register_user(test_email, test_password)

                # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω
                client.write_warning('\n‚ö†Ô∏è –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞')
                token = input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ').strip()

                confirm_result = client.confirm_email(test_email, token)
                client.write_message(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_result}')

                # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø–æ–¥ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                login_result = client.login(test_email, test_password)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        if 'token' in login_result:
            user_details = client.get_user_details()
            client.write_message('\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:')
            pprint(user_details)

    def _run_products_scenario(self, client, user_email, user_password):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        """
        self.stdout.write(self.style.SUCCESS('\n---- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ----\n'))

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        shops = client.get_shops()
        client.write_message('\n–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:')
        pprint(shops)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = client.get_categories()
        client.write_message('\n–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
        pprint(categories)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = client.get_products()
        client.write_message('\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:')
        if 'results' in products:
            client.write_message(f'–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {products["count"]}')
            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 2 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            for product in products['results'][:2]:
                client.write_message(f'- {product["product"]["name"]} ({product["price"]} —Ä—É–±.)')

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö
        if 'results' in products and products['results']:
            product_id = products['results'][0]['id']
            product_details = client.get_product_details(product_id)
            client.write_message('\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:')
            pprint(product_details)

    def _run_order_scenario(self, client, user_email, user_password):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏
        """
        self.stdout.write(self.style.SUCCESS('\n---- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏ ----\n'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not client.token:
            login_result = client.login(user_email, user_password)
            if 'token' not in login_result:
                client.write_error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã')
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        products = client.get_products()
        if 'results' not in products or not products['results']:
            client.write_warning('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã')
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        product_id = products['results'][0]['id']
        items = [{'product_info': product_id, 'quantity': 2}]
        basket_result = client.add_to_basket(items)
        client.write_message('\n–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:')
        pprint(basket_result)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        basket = client.get_basket()
        client.write_message('\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:')
        pprint(basket)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contacts = client.get_contacts()
        client.write_message('\n–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:')
        pprint(contacts)

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        contact_id = None
        if isinstance(contacts, list) and contacts:
            contact_id = contacts[0]['id']
        else:
            contact_result = client.add_contact(
                city='–ú–æ—Å–∫–≤–∞',
                street='–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞',
                house='123',
                phone='+79001234567',
                apartment='42'
            )
            client.write_message('\n–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:')
            pprint(contact_result)

            if 'id' in contact_result:
                contact_id = contact_result['id']

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç, –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        basket_id = None
        if isinstance(basket, dict) and 'id' in basket:
            basket_id = basket['id']

        if basket_id and contact_id:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
            create_order = input('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑? (y/n): ').strip().lower()
            if create_order == 'y':
                order_result = client.create_order(basket_id, contact_id)
                client.write_message('\n–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:')
                pprint(order_result)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        orders = client.get_orders()
        client.write_message('\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:')
        pprint(orders)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö
        if isinstance(orders, list) and orders:
            order_id = orders[0]['id']
            order_details = client.get_order_details(order_id)
            client.write_message('\n–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:')
            pprint(order_details)